// This file contains rules to create a perfect hash function for operator mapping

%delimiters="\"
%language=ANSI-C
%define lookup-function-name lookup
%struct-type

%{
    // Manually include header header file
    #include "mapop.h"

    /*
     ! These have to be manually replaced if used as prefix:
        
        INC -> PIN
        DEC -> PDE
        ADD -> POS
        SUB -> NEG
    */
%}

// Struct to map operators to
struct s_op;

%%
++\   OP_INCR,    POSTFIX, LTR, 14    /*  Increment                 */
--\   OP_DECR,    POSTFIX, LTR, 14    /*  Decrement                 */
!\    OP_LNOT,    PREFIX,  RTL, 13    /*  Logical NOT               */
@\    OP_ARGS,    PREFIX,  RTL, 13    /*  Function args (special)   */
~\    OP_BNOT,    PREFIX,  RTL, 13    /*  Bitwise NOT               */
*\    OP_MUL,     INFIX,   LTR, 12    /*  Multiply                  */
/\    OP_DIV,     INFIX,   LTR, 12    /*  Divide                    */
"%"\  OP_MOD,     INFIX,   LTR, 12    /*  Modulo                    */
+\    OP_ADD,     INFIX,   LTR, 11    /*  Add                       */
-\    OP_SUB,     INFIX,   LTR, 11    /*  Subtract                  */
<\    OP_LET,     INFIX,   LTR, 10    /*  Less Than                 */
<=\   OP_LEQ,     INFIX,   LTR, 10    /*  Less than or equal to     */
>\    OP_GRT,     INFIX,   LTR, 10    /*  Greater than              */
>=\   OP_GEQ,     INFIX,   LTR, 10    /*  Greater than or equal to  */
==\   OP_EQU,     INFIX,   LTR, 9     /*  Equals                    */
!=\   OP_NEQU,    INFIX,   LTR, 9     /*  Not Equals                */
&\    OP_BAND,    INFIX,   LTR, 8     /*  Bitwise AND               */
^\    OP_BXOR,    INFIX,   LTR, 7     /*  Bitwise XOR               */
|\    OP_BOR,     INFIX,   LTR, 6     /*  Bitwise OR                */
&&\   OP_LAND,    INFIX,   LTR, 5     /*  Logical AND               */
||\   OP_LOR,     INFIX,   LTR, 4     /*  Logical OR                */
=\    OP_ASS,     INFIX,   RTL, 3     /*  Assign                    */
:\    OP_HARDSET, INFIX,   RTL, 3     /*  Set in current scope      */
->\   OP_LAMBDA,  INFIX,   RTL, 3     /*  Lambda declaration        */
,\    OP_LIST,    INFIX,   LTR, 2     /*  List                      */
;\    OP_END,     POSTFIX, RTL, 1     /*  Semicolon; end expression */
%%

operator *mapop(char *expr) {
    return lookup(expr, strlen(expr));
}

operator *mappreop(char *expr) {
    static operator virt[] = {
        {"++_",      OP_PREINCR, PREFIX, RTL, 9},
        {"--_",      OP_PREDECR, PREFIX, RTL, 9},
        {"+_",       OP_POS,     PREFIX, RTL, 9},
        {"-_",       OP_NEG,     PREFIX, RTL, 9},
    };

    operator *ret = lookup(expr, strlen(expr));

    if(ret != 0) {
        switch(ret->opcode) {
            case OP_INCR:
                ret = &virt[0];
                break;
            case OP_DECR:
                ret = &virt[1];
                break;
            case OP_ADD:
                ret = &virt[2];
                break;
            case OP_SUB:
                ret = &virt[3];
            default: break;
        }
    }
    return ret;
}
